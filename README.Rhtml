<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>orgclockr</title>
<!-- 2015-03-13 Fr 12:32 -->
<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta  name="generator" content="Org-mode" />
<meta  name="author" content="Bernhard PrÃ¶ll" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="../css/orgish.css" />
<link rel="stylesheet" type="text/css" href="../css/table.css/" />
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">orgclockr</h1>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Introduction to orgclockr</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> What's Org Mode and why would I want to parse it?</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Corresponding to its description, the Emacs-mode <a href="http://orgmode.org/manual/index.html#Top">Org mode</a> is an organizational tool that lives in the plain text world. Furthermore, it's a quite complex markup language. Complexity is not imposed though, jumping into it is adviced here. What sets Org mode apart other organizational tools is the seemingly flawless integration of a full-fledged task management solution into a flexible outliner.
</p>

<p>
Org mode offers multiple options to filter by org elements: Filtering in an org file by todo keywords for example is achieved by <code>org-sparse-tree</code> which uses an overlay. This may be sufficient to get an overview in Org mode, but for presentational purposes this is not an option. Another way to filter by elements is using the <code>org-agenda</code> with <code>org-agenda-filter-by-tag</code> and similar filter functions. A filtered <code>org-agenda</code> can be exported to various formats via <code>org-agenda-write</code>, which provides a simple presentation of your current agenda. In my humble opinion though, there is still a need to repeatedly filter large org files by various org elements outside Emacs. This will especially pay off when Org mode is used for its clocking capabilities. I will elaborate on this in the next chapter.
</p>

<p>
There are <a href="http://orgmode.org/worg/org-tools/">various parsers</a> for elements in org files, even one in R (<a href="http://cran.r-project.org/web/packages/orgR/index.html">orgR</a>) is available on CRAN. I recommend using orgR for quickly extracting the raw headings and timestamps of an org file, but the results on todo keywords and tags were certainly not satisfactory. <code>orgclockr</code> strives to provide more flexible extraction functions to capture the elements in a heading as well as the clocking information related to it.
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Clocking Work Time in Org Mode</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Keeping track of the time you spend not only on work but also on activities to which you dedicate yourself in your free time is something that the <a href="http://quantifiedself.com/">Quantified Self Movement</a> brought to a whole new level. What I really like about it is the inspiring <a href="http://quantifiedself.com/data-visualization/">collection of visualizations</a> that are derived from the continuous data collection by its members. Clocking work time is also of use in task and project management for getting a glimpse on what you spent your time on and how the time spent meets the according effort. For me, becoming aware of my weaknesses (spending way too much time on some tasks, totally avoiding others) offers the greatest opportunity to improve my work efficiency. While Org mode is a fantastic tool to do the actual clocking and to build simple clock tables, I struggled doing the weekly reviews properly. Most of the time I noticed where my priorities were and how much time I spent in total and proceeded with archiving completed tasks or something else. To actually improve my time management, I planned on focussing on my work efficiency rate, which compares the effort to the time spent, and visualizing results in time series to become aware of trends and changes.
</p>

<p>
Org mode allows to clock the time spent on a task. The relevant information is stored in a drawer using timestamps in the format predetermined in <code>org-time-stamp-formats</code>. Furthermore, to fix a time limit, Org mode uses both an effort and a deadline property. These elements will be parsed by <code>orgclockr</code> and the time spent, the average length of a clock interval, the number of clock intervals on a given day, the period of time on a task and the effort set returned per task. These informations allow for a more detailed clock report than the built-in <code>org-clock-report</code> in Org mode. The availability of the clocking data in a <code>dplyr::data_frame</code> object is of great benefit not only for filtering headings by elements, but also for calculating measures of work efficiency. Examples are provided in the next chapter.
</p>

<p>
Learning to set efforts properly can only be done from experience. Therefore making clocking a habit is indispensable. Setting the right efforts is especially useful when breaking down large projects into manageable parts. While Org mode comes in useful when pointing out that you are exceeding the effort set on the currently clocked task, I'd like to have a more general view on my efforts set for a whole project. Calculating the sum of the estimated time needed on the whole project or parts of it is more convenient in R than in Org Tables. Arguably the greatest benefit  of <code>orgclockr</code>, though, is in creating time series and visualizing the results with various plotting libraries in R.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Exploring an Org File</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Data: orgfile</h3>
<div class="outline-text-3" id="text-2-1">
<p>
The <code>orgclockr</code> package comes with the built-in dataset <code>orgfile</code>. This dataset in the form of a character vector illustrates the typical org file. For presentational purposes the file consists of only 100 lines but is enriched with various org elements. The object is the result from reading in an org file. Typically this is done with a combination of <code>file()</code> and <code>readLines()</code> in R:
</p>

<div class="org-src-container">

<pre class="src src-r">file("/path/to/file.org") %&gt;%
    readLines()
</pre>
</div>

<p>
This package provides the raw data of <code>orgfile</code>, the <code>sample.org</code> file the object stems from, as well. Reading <code>sample.org</code> is simply done using <code>system.file()</code>:
</p>

<div class="org-src-container">

<pre class="src src-r">system.file("extdata", "sample.org", package = "orgclockr") %&gt;%
    readLines()
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Extracting the Org Elements</h3>
<div class="outline-text-3" id="text-2-2">
<p>
<code>orgclockr</code> provides several extraction functions if you are only interested in a specific element of an org file. These start with <code>extract_</code>. Most commonly you'd want to extract several elements and store them in a <code>dplyr::data_frame</code> for further manipulation, which is done using <code>org_elements_df()</code>. The code given below filters the headings of the built-in dataset <code>orgfile</code> that are <b>not</b> tagged with <code>TagThree</code>. If you are not familiar with the manipulation functions of the <code>dplyr</code> library yet, you may start with the <a href="http://www.rstudio.com/resources/cheatsheets/">Data Wrangling Cheat Sheet</a> provided by RStudio.
</p>

<div class="org-src-container">

<pre class="src src-r">f &lt;- org_elements_df(orgfile)
filter(f, !grepl("TagThree", Tag))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="all" frame="border" align="center">
<caption class="t-above"><span class="table-number">Table 1:</span> Filtering tasks that are not tagged with <code>TagThree</code></caption>

<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="right" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Headline</th>
<th scope="col" class="left">Category</th>
<th scope="col" class="left">Tag</th>
<th scope="col" class="right">Level</th>
<th scope="col" class="left">State</th>
<th scope="col" class="left">Deadline</th>
<th scope="col" class="left">Effort</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">HeadingOne</td>
<td class="left">CategoryOne</td>
<td class="left">TagOne</td>
<td class="right">1</td>
<td class="left">nil</td>
<td class="left">nil</td>
<td class="left">nil</td>
</tr>

<tr>
<td class="left">TaskOne</td>
<td class="left">nil</td>
<td class="left">TagOne TagTwo</td>
<td class="right">2</td>
<td class="left">TODO</td>
<td class="left">nil</td>
<td class="left">nil</td>
</tr>

<tr>
<td class="left">TaskTwo</td>
<td class="left">nil</td>
<td class="left">TagOne</td>
<td class="right">2</td>
<td class="left">TODO</td>
<td class="left">nil</td>
<td class="left">20</td>
</tr>

<tr>
<td class="left">TaskThree</td>
<td class="left">nil</td>
<td class="left">TagOne</td>
<td class="right">2</td>
<td class="left">TODO</td>
<td class="left">nil</td>
<td class="left">nil</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Extracting Clocking Information</h3>
<div class="outline-text-3" id="text-2-3">
<p>
While <code>org_elements_df()</code> extracts various elements from org headings, I decided to separate the clocking information from it. This is therefore returned from <code>org_clock_df()</code>, which will also result in a <code>dplyr::data_frame</code> object. As will be shown below, the local data frames returned from both function can easily be joined using <code>Headline</code> as the index column. The following code returns the number of days a task has been clocked into. Do not confuse this with the sum of <code>TimeSpent</code> in days:
</p>

<div class="org-src-container">

<pre class="src src-r">org_clock_df(orgfile) %&gt;%
    group_by(Headline) %&gt;%
    summarise(DaysOnTask = n())
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 2:</span> Days on task</caption>

<colgroup>
<col  class="left" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Headline</th>
<th scope="col" class="right">DaysOnTask</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">TaskEight</td>
<td class="right">2</td>
</tr>

<tr>
<td class="left">TaskFive</td>
<td class="right">2</td>
</tr>

<tr>
<td class="left">TaskNine</td>
<td class="right">1</td>
</tr>

<tr>
<td class="left">TaskSeven</td>
<td class="right">1</td>
</tr>

<tr>
<td class="left">TaskSix</td>
<td class="right">5</td>
</tr>

<tr>
<td class="left">TaskTen</td>
<td class="right">1</td>
</tr>

<tr>
<td class="left">TaskTwo</td>
<td class="right">2</td>
</tr>
</tbody>
</table>

<p>
The table below sorts the tasks and days by the amount of time invested:
</p>

<div class="org-src-container">

<pre class="src src-r">org_clock_df(orgfile) %&gt;%
    filter(between(Date, Sys.Date() - 60, Sys.Date())) %&gt;%
    group_by(Date, Headline) %&gt;%
    summarise(TimeSpent) %&gt;%
    ungroup() %&gt;%
    arrange(desc(TimeSpent))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 3:</span> Filtering the last 60 days and sort by time spent</caption>

<colgroup>
<col  class="right" />

<col  class="left" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">Date</th>
<th scope="col" class="left">Headline</th>
<th scope="col" class="right">TimeSpent</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">2015-01-19</td>
<td class="left">TaskTen</td>
<td class="right">334</td>
</tr>

<tr>
<td class="right">2015-01-20</td>
<td class="left">TaskEight</td>
<td class="right">129</td>
</tr>

<tr>
<td class="right">2015-02-28</td>
<td class="left">TaskFive</td>
<td class="right">51</td>
</tr>

<tr>
<td class="right">2015-02-05</td>
<td class="left">TaskEight</td>
<td class="right">23</td>
</tr>

<tr>
<td class="right">2015-03-01</td>
<td class="left">TaskFive</td>
<td class="right">6</td>
</tr>

<tr>
<td class="right">2015-01-19</td>
<td class="left">TaskNine</td>
<td class="right">2</td>
</tr>
</tbody>
</table>

<p>
The <code>AvgClockInterval</code> returns the mean or median interval for the task per day. You may be interested how the average time on a task has been over time:
</p>

<div class="org-src-container">

<pre class="src src-r">org_clock_df(orgfile) %&gt;%
    group_by(Headline) %&gt;%
    summarise(AvgTimeOnTask = round(sum(TimeSpent)/sum(NIntervals), 2)) %&gt;%
    arrange(desc(AvgTimeOnTask))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 4:</span> The average clock interval per task</caption>

<colgroup>
<col  class="left" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Headline</th>
<th scope="col" class="right">AvgTimeOnTask</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">TaskSeven</td>
<td class="right">122</td>
</tr>

<tr>
<td class="left">TaskTen</td>
<td class="right">55.67</td>
</tr>

<tr>
<td class="left">TaskEight</td>
<td class="right">50.67</td>
</tr>

<tr>
<td class="left">TaskSix</td>
<td class="right">46.4</td>
</tr>

<tr>
<td class="left">TaskTwo</td>
<td class="right">10.5</td>
</tr>

<tr>
<td class="left">TaskFive</td>
<td class="right">9.5</td>
</tr>

<tr>
<td class="left">TaskNine</td>
<td class="right">2</td>
</tr>
</tbody>
</table>

<p>
After doing simple calculations on the clocking data you may want to visualize your time spent as a time series. The <code>autoplot()</code> takes a <code>zoo</code> object, which is particularly aimed at irregular time series:
</p>

<div class="org-src-container">

<pre class="src src-r">library(zoo)

org_clock_df(orgfile) %&gt;%
    select(Date, TimeSpent) %&gt;%
    filter(between(Date, Sys.Date() - 90, Sys.Date())) %&gt;%
    as.data.frame() %&gt;%
    read.zoo(index.column = "Date") %&gt;%
    autoplot.zoo(stat = "identity",
                 geom = "bar") +
                     scale_fill_gradient2(trans = "sqrt") +
                     aes(fill = Value) +
                     guides(fill = FALSE) +
                     theme_classic() +
                     ylab("Time Spent (min)") +
                     xlab("Date")
</pre>
</div>


<div class="figure">
<p><img src="file:///home/bernhard/R-programming/images/a.png" alt="a.png" />
</p>
<p><span class="figure-number">Figure 1:</span> The time spent per day for the last 3 months</p>
</div>

<p>
The plot below shows a very simple retrospective Gantt chart diagram, that takes the first and the last day clocked into a task as values:
</p>

<div class="org-src-container">

<pre class="src src-r">org_clock_df(orgfile) %&gt;%
    select(Date, Headline) %&gt;%
    filter(between(Date, Sys.Date() - 90, Sys.Date())) %&gt;%
    as.data.frame() %&gt;%
    read.zoo(index.column = "Date") %&gt;%
    autoplot.zoo(stat = "identity",
                 geom = "line") +
                     scale_color_brewer(type = "qual",
                                        palette = 2) +
                     aes(size	= 1,
                         colour = Value) +
                     guides(size	= FALSE,
                            colour	= FALSE) +
                     theme_classic() +
                     ylab("Task") + xlab("Date")
</pre>
</div>


<div class="figure">
<p><img src="file:///home/bernhard/R-programming/images/b.png" alt="b.png" />
</p>
<p><span class="figure-number">Figure 2:</span> A very simple retrospective Gantt chart diagram</p>
</div>

<p>
This plot is pretty much self-explanatory:
</p>

<div class="org-src-container">

<pre class="src src-r">Palette &lt;- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2",
             "#D55E00")
org_clock_df(orgfile) %&gt;%
    group_by(Headline) %&gt;%
    summarise(TimeSpent = sum(TimeSpent)) %&gt;%
    ggplot(aes(Headline, sort(TimeSpent, decreasing = TRUE),
               fill = Palette)) +
                   geom_bar(stat  = "identity",
                            width = .5) +
                   theme_classic() +
                   guides(fill = FALSE) +
                   labs(x = "Task", y = "Time Spent (min)")
</pre>
</div>


<div class="figure">
<p><img src="file:///home/bernhard/R-programming/images/c.png" alt="c.png" />
</p>
<p><span class="figure-number">Figure 3:</span> Plotting the time spent total per task</p>
</div>

<p>
Joining the results of <code>org_clock_df()</code> and <code>org_elements_df()</code> is achieved with the various dedicated functions provided by the <code>dplyr</code> library. The following example uses a <code>left_join()</code>, because we want omit the information on headings without any clocking information:
</p>

<div class="org-src-container">

<pre class="src src-r">a_df &lt;- org_clock_df(orgfile)
b_df &lt;- org_elements_df(orgfile)
left_join(a_df, b_df) %&gt;%
    group_by(Date, Headline) %&gt;%
    summarise(TimeSpentTotal = sum(TimeSpent), Effort) %&gt;%
    filter(Effort &lt; TimeSpentTotal) %&gt;%
    mutate(Overdue = TimeSpentTotal - Effort) %&gt;%
    ungroup() %&gt;%
    arrange(desc(Overdue))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 5:</span> Sorting tasks by the amount of time they are overdue</caption>

<colgroup>
<col  class="right" />

<col  class="left" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">Date</th>
<th scope="col" class="left">Headline</th>
<th scope="col" class="right">TimeSpentTotal</th>
<th scope="col" class="right">Effort</th>
<th scope="col" class="right">Overdue</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">2015-01-19</td>
<td class="left">TaskTen</td>
<td class="right">334</td>
<td class="right">25</td>
<td class="right">309</td>
</tr>

<tr>
<td class="right">2015-01-20</td>
<td class="left">TaskEight</td>
<td class="right">129</td>
<td class="right">25</td>
<td class="right">104</td>
</tr>

<tr>
<td class="right">2015-01-05</td>
<td class="left">TaskSeven</td>
<td class="right">122</td>
<td class="right">30</td>
<td class="right">92</td>
</tr>

<tr>
<td class="right">2014-12-21</td>
<td class="left">TaskSix</td>
<td class="right">90</td>
<td class="right">60</td>
<td class="right">30</td>
</tr>
</tbody>
</table>

<p>
The plot below is what I had in mind before writing <code>orgclockr</code>:
</p>

<div class="org-src-container">

<pre class="src src-r">library(tidyr)

left_join(a_df, b_df) %&gt;%
    select(Date, Headline, TimeSpent, Effort) %&gt;%
    filter(!is.na(Effort)) %&gt;%
    group_by(Headline) %&gt;%
    summarise(TimeSpent = sum(TimeSpent),
              Effort = unique(Effort)) %&gt;%
                  tidyr::gather(Variable, Value, TimeSpent:Effort) %&gt;%
                  as.data.frame() %&gt;%
                  ggplot() +
                  aes(Headline, Value,
                      fill = Variable) +
                          scale_fill_brewer(type = "qual",
                                            palette = 7) +
                          geom_bar(stat		= "identity",
                                   position	= "dodge") +
                                       theme_classic() +
                                       theme(legend.title	= element_blank(),
                                             legend.position	= "bottom") +
                          labs(x = "Task", y = "Time (min)")
</pre>
</div>


<div class="figure">
<p><img src="file:///home/bernhard/R-programming/images/d.png" alt="d.png" />
</p>
<p><span class="figure-number">Figure 4:</span> Compare the time spent per task to the effort set</p>
</div>

<p>
We got a striking example of mostly under estimates and one over estimate here. This obviously should be avoided. The preceeding plot clearly suggests horrible work efficiency rates for the tasks depicted with the sole exception of <code>TaskTwo</code> near the desired value of one:
</p>

<div class="org-src-container">

<pre class="src src-r">left_join(a_df, b_df) %&gt;%
    select(Date, Headline, TimeSpent, Effort) %&gt;%
    filter(!is.na(Effort)) %&gt;%
    group_by(Headline) %&gt;%
    summarise(TimeSpent = sum(TimeSpent),
              Effort = unique(Effort)) %&gt;%
                  mutate(EfficiencyRate = round(Effort/TimeSpent, 2))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 6:</span> Calculating the work efficiency rate</caption>

<colgroup>
<col  class="left" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Headline</th>
<th scope="col" class="right">TimeSpent</th>
<th scope="col" class="right">Effort</th>
<th scope="col" class="right">EfficiencyRate</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">TaskEight</td>
<td class="right">152</td>
<td class="right">25</td>
<td class="right">0.16</td>
</tr>

<tr>
<td class="left">TaskNine</td>
<td class="right">2</td>
<td class="right">240</td>
<td class="right">120</td>
</tr>

<tr>
<td class="left">TaskSeven</td>
<td class="right">122</td>
<td class="right">30</td>
<td class="right">0.25</td>
</tr>

<tr>
<td class="left">TaskSix</td>
<td class="right">232</td>
<td class="right">60</td>
<td class="right">0.26</td>
</tr>

<tr>
<td class="left">TaskTen</td>
<td class="right">334</td>
<td class="right">25</td>
<td class="right">0.07</td>
</tr>

<tr>
<td class="left">TaskTwo</td>
<td class="right">21</td>
<td class="right">20</td>
<td class="right">0.95</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Limitations</h2>
<div class="outline-text-2" id="text-3">
<p>
This section may and hopefully will undergo changes in the future, so the list below is also a development roadmap:
</p>

<ul class="org-ul">
<li>Currently the tag inheritance provided by the <code>inherit_tags</code> parameter in <code>org_elements_df()</code> and the <code>inherit</code> parameter in <code>extract_tags()</code> only works for level one tags.
</li>
<li>For simplicity reasons, clock intervals are not split at midnight. Keep this in mind when clocking for long periods of time spanning from one day to the next. This may impair the meaningfulness of the <code>TimeSpent</code> in <code>org_clock_df()</code>.
</li>
<li>Currently <code>orgclockr</code> doesn't parse the <code>ARCHIVE_ITAGS</code> and <code>ARCHIVE_CATEGORY</code> in archived org files.
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Further Reading</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><a href="http://sachachua.com/blog/2007/12/clocking-time-with-emacs-org/">http://sachachua.com/blog/2007/12/clocking-time-with-emacs-org/</a>
</li>
<li><a href="http://doc.norang.ca/org-mode.html#Clocking">http://doc.norang.ca/org-mode.html#Clocking</a>
</li>
<li><a href="http://orgmode.org/manual/Clocking-work-time.html#Clocking-work-time">http://orgmode.org/manual/Clocking-work-time.html#Clocking-work-time</a>
</li>
</ul>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Bernhard PrÃ¶ll</p>
<p class="date">Created: 2015-03-13 Fr 12:32</p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.10)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
